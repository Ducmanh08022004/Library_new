// Notifications.controller.js
const Notification = require('./Notifications.model');
const moment = require('moment');

class NotificationsController {
    // L·∫•y danh s√°ch s√°ch ƒë·∫øn h·∫°n tr·∫£ cho sinh vi√™n
    async getOverdueBooks(req, res) {
        try {
            const masv = req.params.masv;  // üëà masv l·∫•y t·ª´ URL

            const borrowedBooks = await Notification.findAll({
                where: { masv: masv },
                order: [['date2', 'ASC']],
            });

            if (!borrowedBooks || borrowedBooks.length === 0) {
                return res.status(200).json({
                    message: 'Sinh vi√™n ch∆∞a m∆∞·ª£n s√°ch n√†o.',
                    notifications: []
                });
            }

            const overdueBooks = borrowedBooks.filter(book => {
                return moment(book.date2).isBefore(moment(), 'day');
            });

            const notifications = overdueBooks.map(book => ({
                message: `S√°ch "${book.nameBook}" ƒë√£ ƒë·∫øn h·∫°n tr·∫£ t·ª´ ng√†y ${moment(book.date2).format('DD-MM-YYYY')}. Vui l√≤ng tr·∫£ l·∫°i s·ªõm.`,
                bookId: book.id,
                nameBook: book.nameBook, // üëà D·ªØ li·ªáu b·∫°n c·∫ßn tr·∫£ v·ªÅ
                date2: moment(book.date2).format('DD-MM-YYYY'),
                status: 'overdue',
            }));

            return res.status(200).json({
                message: notifications.length > 0
                    ? 'Danh s√°ch s√°ch qu√° h·∫°n tr·∫£'
                    : 'Kh√¥ng c√≥ s√°ch qu√° h·∫°n.',
                notifications
            });

        } catch (error) {
            console.error('‚ùå L·ªói NotificationsController:', error);
            res.status(500).json({ message: 'ƒê√£ x·∫£y ra l·ªói', error: error.message });
        }
    }
}

module.exports = new NotificationsController();
